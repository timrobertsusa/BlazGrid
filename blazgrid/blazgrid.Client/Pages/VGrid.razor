@* @inject DataSource Data

<div class="grid" tabindex="-1">
    <QuickGrid ItemsProvider="@itemsProvider" Virtualize="true" @ref="grid">
        <PropertyColumn Title="Product name" Property="@(c => c.Proprietary_Name)" Sortable="true" InitialSortDirection="SortDirection.Ascending" IsDefaultSortColumn="true">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="nameSearch" @bind:event="oninput" placeholder="Product name..." />
                </div>
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Title="Product type" Property="@(c => c.Product_Type)" Sortable="true" />
        <TemplateColumn Title="Start" SortBy="@marketingStartSort">
            @context.MarketingStart?.ToShortDateString()
        </TemplateColumn>
        <TemplateColumn Title="End" SortBy="@marketingEndSort">
            @context.MarketingEnd?.ToShortDateString()
        </TemplateColumn>
        <PropertyColumn Title="Application/citation" Property="@(c => c.Application_Number_Or_Citation)" Sortable="true" />
    </QuickGrid>
</div>

<div class="my-2">
    <div class="search-box inline-block mr-4 my-1">
        <input type="search" autofocus @bind="nameSearch" @bind:event="oninput" @bind:after="()=>grid.RefreshDataAsync()" placeholder="Product name..." />
    </div>

    <div class="inline-block my-1">
        Total: <strong>@numResults results found</strong>
    </div>
</div>

@code {
    QuickGrid<DrugInfo>? grid;
    GridItemsProvider<DrugInfo> itemsProvider;
    int numResults;
    string nameSearch;
    GridSort<DrugInfo> marketingStartSort = GridSort<DrugInfo>.ByAscending(x => x.Marketing_Start_Date);
    GridSort<DrugInfo> marketingEndSort = GridSort<DrugInfo>.ByAscending(x => x.Marketing_End_Date);

    protected override void OnInitialized()
    {
        itemsProvider = async request =>
        {Data
            var result = await .GetDrugInfoAsync(request, nameSearch);

            // Separately display the item count
            if (result.TotalItemCount != numResults && !request.CancellationToken.IsCancellationRequested)
            {
                numResults = result.TotalItemCount;
                StateHasChanged();
            }

            return result;
        };
    }
} *@